---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by z15085.
--- DateTime: 2019/9/4 9:31
---

--tab1 = {key1 = "val1", key2 = "val2", "val3"}
--for k, v in pairs(tab1) do
--    print(k .. " - " .. v)
--end
--
--print("---")
--tab1.key1 = nil
--for k, v in pairs(tab1) do
--    print(k .. " - " .. v)
--end

--i = 10
--while (i > 0)
--do
--    print(i)
--    i = i - 1
--end

--for i=1,10,2 do
--    print(i)
--end

--a = {1,2,3,4}
--for i,v in ipairs(a) do
--    print(i, v)
--end

--i = 10
--repeat
--    print(i)
--    i = i - 1
--until (i < 0)

--local function max(num1, num2)
--    if (num1 > num2)
--    then
--        return num1
--    else
--        return num2
--    end
--end
--
--print(max(1, 2))

--local myprint = function(param)
--    print(param)
--end
--
--local function add(num1, num2, func)
--    func(num1 + num2)
--end
--
--add(1, 2, myprint)

--function add(...)
--    local s = 0
--    for i, v in ipairs{...} do
--        s = s + v
--    end
--    return s
--end
--
--print(add(1,2,3,4,5))
--
--function ave(...)
--    local s = 0
--    for i, v in ipairs { ... } do
--        s = s + v
--    end
--    return s / #{...}
--end
--
--print(ave(1, 2, 3))

--mytable = setmetatable({}, {})
--mytable2 = setmetatable({}, {})
--
--print(getmetatable(mytable2))

--other = { foo = 3 }
--t = setmetatable({}, { __index = other })
--print(t.foo)

--mytable = setmetatable({ key1 = "value1" }, { __index = function(mytable, key)
--    if key == "key2" then
--        return "metatablevalue"
--    else
--        return nil
--    end
--end
--})
--
--print(mytable.key1, mytable.key2, mytable.key3)

-- 生产者和消费者
--local newProdutor
--
--function productor()
--    local i = 0
--    while true do
--        i = i + 1
--        send(i)
--    end
--end
--
--function consumer()
--    while true do
--        local i = receive()
--        print("consumer: " .. i)
--    end
--end
--
--function receive()
--    local status, value = coroutine.resume(newProdutor)
--    return value
--end
--
--function send(x)
--    coroutine.yield(x)
--end
--
--newProdutor = coroutine.create(productor)
--consumer()

--test coroutine
-- coroutine.create
--co = coroutine.create(
--        function(i)
--            print(i)
--        end
--)
--
--coroutine.resume(co, 1)
--print(coroutine.status(co))

--coroutine.wrap
--co = coroutine.wrap(
--        function(i)
--            print(i)
--        end
--)
--
--co(1)

--file = io.open('resource/sample.txt', "a+")
--io.input(file)
--repeat
--    s = io.read("*l")
--    if s ~= nil then
--        print(s)
--    end
--until s == nil
--io.close(file)

--print("---")

--file = io.open('resource/sample.txt', "a+")
--io.output(file)
--io.write("-- 普希金 《假如生活欺骗了你》")
--io.close(file)

-- 文件操作 完全模式
--file = io.open("resource/sample.txt", "r")
---- 输出文件第一行
--print(file:read())
---- 关闭文件
--file:close()
--
---- 以附加的方式打开只写文件
--file = io.open("resource/sample2.txt", "a")
---- 在文件最后一行添加
--file:write("--test")
--file:close()

-- error handle
--local function add(a, b)
--    assert(type(a) == "number", "a is not number")
--    assert(type(b) == "number", "b is not number")
--    return a + b
--end
--
--print(add(1, 2))

-- error()
--error(message [, level])

-- pcall xpcall debug
--print(pcall(function (i) print(i) error('error..') end, 33))
--print(
--        xpcall(
--                function(i)
--                    print(i)
--                    error('error..')
--                end,
--                function()
--                    print(debug.traceback())
--                end, 33))

-- xpcall sample2
--function myf()
--    n = n / nil
--end
--
--function myerr(err)
--    print("ERROR..", err)
--end
--
--status = xpcall(myf, myerr)
--print(status)

-- debug()
--function myf()
--    print(debug.traceback("Stack Trace.."))
--    print(debug.getinfo(1))
--    print("Stack Trace end")
--    return 10
--end
--
--myf()

--print(debug.getinfo(1))

-- debug.getupvalue()
--function newCounter()
--    local n = 0
--    local k = 0
--    return function()
--        k = n
--        n = n + 1
--        return n
--    end
--end
--
--counter = newCounter()
--print(counter())
--print(counter())
--
--local i = 1
--
--repeat
--    name, val = debug.getupvalue(counter, i)
--    if name then
--        print("index", i, name, "=", val)
--        if (name == "n") then
--            debug.setupvalue(counter, 2, 10)
--        end
--        i = i + 1
--    end
--until not name
--
--print(counter())

-- OOP
--Account = { balance = 0 }
--function Account.withdraw(v)
--    Account.balance = Account.balance - v
--end
--
--Account.withdraw(100.00)
--print(Account.balance)

-- OOP sample
--元类
--Rectangle = {area=0, length=0,breadth=0}
----派生类的方法 new
--function Rectangle:new (o, length, breadth)
--    o = o or {}
--    setmetatable(o, self)
--    self.__index = self
--    self.length = length or 0
--    self.breadth = breadth or 0
--    self.area = length * breadth
--    return o
--end
--
---- 派生类的方法 printArea
--function Rectangle:printArea()
--    print("矩形面积..", self.area)
--end
--
--r = Rectangle:new(nil, 10, 20)
----访问属性
----使用 . 访问类的属性
--print(r.area)
----访问成员函数
----使用 : 访问类的成员函数
--r:printArea()

-- 元类
Shape = {area = 0}
-- 基础类方法 new
function Shape:new(o, side)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    side = side or 0
    self.area = side * side
    return o
end
-- 基础类方法 printArea
function Shape:printArea()
    print("面积为：",self.area)
end
--创建对象
myshape = Shape:new(nil, 10)
myshape:printArea()